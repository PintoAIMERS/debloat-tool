# Form implementation generated from reading ui file 'debloat-tool.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_Title(object):
    def setupUi(self, Title):
        Title.setObjectName("Title")
        Title.resize(800, 600)
        font = QtGui.QFont()
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.StyleStrategy.PreferDefault)
        Title.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("img/icon/gato-sorrindo.jpg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        Title.setWindowIcon(icon)
        Title.setStyleSheet("background-color: rgba(34,31,38,255)")
        self.centralwidget = QtWidgets.QWidget(parent=Title)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(320, 300, 141, 116))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.DebloatGameCheckBox = QtWidgets.QCheckBox(parent=self.verticalLayoutWidget)
        self.DebloatGameCheckBox.setStyleSheet("color: rgb(245, 245, 245);")
        self.DebloatGameCheckBox.setObjectName("DebloatGameCheckBox")
        self.verticalLayout.addWidget(self.DebloatGameCheckBox)
        self.ThemesCheckBox = QtWidgets.QCheckBox(parent=self.verticalLayoutWidget)
        font = QtGui.QFont()
        self.ThemesCheckBox.setFont(font)
        self.ThemesCheckBox.setStyleSheet("color: rgb(245, 245, 245);")
        self.ThemesCheckBox.setObjectName("ThemesCheckBox")
        self.verticalLayout.addWidget(self.ThemesCheckBox)
        self.HitsoundCheckBox = QtWidgets.QCheckBox(parent=self.verticalLayoutWidget)
        font = QtGui.QFont()
        self.HitsoundCheckBox.setFont(font)
        self.HitsoundCheckBox.setStyleSheet("color: rgb(245, 245, 245);")
        self.HitsoundCheckBox.setObjectName("HitsoundCheckBox")
        self.verticalLayout.addWidget(self.HitsoundCheckBox)
        self.WeaponsCheckBox = QtWidgets.QCheckBox(parent=self.verticalLayoutWidget)
        self.WeaponsCheckBox.setStyleSheet("color: rgb(245, 245, 245);")
        self.WeaponsCheckBox.setObjectName("WeaponsCheckBox")
        self.verticalLayout.addWidget(self.WeaponsCheckBox)
        self.ApplyPushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.ApplyPushButton.setGeometry(QtCore.QRect(340, 420, 87, 26))
        font = QtGui.QFont()
        self.ApplyPushButton.setFont(font)
        self.ApplyPushButton.setStyleSheet("background-color: rgba(34,31,38,255);\n"
"color: rgb(245, 245, 245);")
        self.ApplyPushButton.setObjectName("ApplyPushButton")
        # Conecta ao m√©todo ApplyClicked
        self.ApplyPushButton.clicked.connect(self.ApplyClicked)
        self.KoovaksLogo = QtWidgets.QLabel(parent=self.centralwidget)
        self.KoovaksLogo.setGeometry(QtCore.QRect(310, 120, 161, 161))
        self.KoovaksLogo.setText("")
        self.KoovaksLogo.setPixmap(QtGui.QPixmap("img/logo/kovaaks.jpg"))
        self.KoovaksLogo.setScaledContents(True)
        self.KoovaksLogo.setObjectName("KoovaksLogo")
        Title.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=Title)
        self.statusbar.setObjectName("statusbar")
        Title.setStatusBar(self.statusbar)

        self.retranslateUi(Title)
        QtCore.QMetaObject.connectSlotsByName(Title)

    def ApplyClicked(self):
        if self.DebloatGameCheckBox.isChecked():
            print("[WARN] Debloat Game Checkbox Marked!")
            # Debloat config file
            file = "config/debloat.conf"
            with open(file, "r") as file:
                for lines in file:
                    dirs = lines.strip()
                    if os.path.isdir(dirs):
                        # Recursive remove
                        shutil.rmtree(dirs)
                        print(f"[INFO] Deleted directory: {dirs}")
                    else:
                        print(f"[ERROR] Directory not found or does not exist: {dirs}")

        if self.HitsoundCheckBox.isChecked():
            print("[WARN] Hitsound Checkbox Marked!")
            # Hitsound config file
            file = "config/hitsounds.conf"
            with open(file, "r") as file:
                for lines in file:
                    file_path = lines.strip()
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                        print(f"[INFO] Deleted hitsound: {file_path}")
                    else:
                        print(f"[ERROR] File not found or is not a file: {file_path}")

        if self.ThemesCheckBox.isChecked():
            print("[WARN] Themes Checkbox Marked!")
            # Themes config file
            file = "config/themes.conf"
            with open(file, "r") as file:
                for lines in file:
                    file_path = lines.strip()
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                        print(f"[INFO] Deleted theme: {file_path}")
                    else:
                        print(f"[ERROR] File not found or is not a file: {file_path}")
        
        if self.WeaponsCheckBox.isChecked():
            print("[WARN] Weapons Checkbox Marked!")
            # Weapons config file
            file = "config/weapons.conf"
            with open(file, "r") as file:
                for lines in file:
                    file_path = lines.strip()
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                        print(f"[INFO] Deleted weapon: {file_path}")
                    else:
                        print(f"[ERROR] File not found or is not a file: {file_path}")
                        
        print("[PINTO AIMERS] Apply!")

    def retranslateUi(self, Title):
        _translate = QtCore.QCoreApplication.translate
        Title.setWindowTitle(_translate("Title", "KovaaK\'s Debloat Tool"))
        self.DebloatGameCheckBox.setText(_translate("Title", "Debloat Game"))
        self.ThemesCheckBox.setText(_translate("Title", "Clear Themes"))
        self.HitsoundCheckBox.setText(_translate("Title", "Clear Hitsound"))
        self.WeaponsCheckBox.setText(_translate("Title", "Clear Weapons"))
        self.ApplyPushButton.setText(_translate("Title", "Apply"))


if __name__ == "__main__":
    import sys, os, shutil
    app = QtWidgets.QApplication(sys.argv)
    Title = QtWidgets.QMainWindow()
    ui = Ui_Title()
    ui.setupUi(Title)
    Title.show()
    sys.exit(app.exec())
